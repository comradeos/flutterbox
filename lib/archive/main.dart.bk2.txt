import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // Этот виджет — корень вашего приложения.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // Это тема вашего приложения.
        //
        // ПОПРОБУЙТЕ ЭТО: Попробуйте запустить приложение с помощью "flutter run".
        // Вы увидите, что у приложения фиолетовая панель инструментов.
        // Затем, не выходя из приложения, попробуйте изменить seedColor
        // в colorScheme ниже на Colors.green и затем используйте "горячую
        // перезагрузку" (сохраните изменения или нажмите кнопку "hot
        // reload" в поддерживаемой Flutter IDE, или нажмите "r", если вы
        // использовали командную строку для запуска приложения).
        //
        // Обратите внимание, что счётчик не сбросился до нуля; состояние
        // приложения не теряется во время перезагрузки. Чтобы сбросить
        // состояние, используйте "hot restart".
        //
        // Это работает и для кода тоже, не только для значений:
        // большинство изменений кода можно протестировать с помощью
        // просто горячей перезагрузки.
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // Этот виджет — домашняя страница вашего приложения. Он является stateful,
  // что означает, что у него есть объект состояния (определён ниже),
  // содержащий поля, влияющие на то, как он выглядит.

  // Этот класс — конфигурация состояния. Он содержит значения (в данном
  // случае заголовок), предоставленные родительским виджетом (в данном
  // случае App), и используется методом build объекта State. Поля в
  // подклассах Widget всегда помечаются как "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      // Этот вызов setState сообщает фреймворку Flutter, что что-то
      // изменилось в этом состоянии, что вызывает повторный запуск метода build
      // ниже, чтобы отображение могло отразить обновлённые значения.
      // Если бы мы изменили _counter без вызова setState(), то метод build
      // не был бы вызван снова, и ничего бы не изменилось на экране.
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    // Этот метод вызывается повторно каждый раз, когда вызывается setState,
    // например, как это делает метод _incrementCounter выше.
    //
    // Фреймворк Flutter оптимизирован для быстрой повторной сборки методов build,
    // так что вы можете просто перестроить всё, что нуждается в обновлении,
    // вместо того чтобы вручную изменять виджеты.
    return Scaffold(
      appBar: AppBar(
        // ПОПРОБУЙТЕ ЭТО: Попробуйте изменить цвет здесь на конкретный цвет
        // (например, Colors.amber) и выполните горячую перезагрузку,
        // чтобы увидеть изменение цвета AppBar, в то время как другие цвета останутся прежними.
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        // Здесь мы берём значение из объекта MyHomePage, который был создан
        // методом App.build, и используем его для установки заголовка AppBar.
        title: Text(widget.title),
      ),
      body: Center(
        // Center — это виджет компоновки. Он принимает один дочерний элемент
        // и размещает его в центре родителя.
        child: Column(
          // Column — тоже виджет компоновки. Он принимает список дочерних элементов
          // и располагает их вертикально. По умолчанию он подгоняется по ширине
          // под своих детей и старается быть как можно выше (в пределах родителя).
          //
          // У Column есть различные свойства для управления размером
          // и размещением дочерних элементов. Здесь мы используем mainAxisAlignment,
          // чтобы расположить дочерние элементы по центру по вертикали;
          // главная ось здесь вертикальная, потому что Column вертикален
          // (перпендикулярная ось — горизонтальная).
          //
          // ПОПРОБУЙТЕ ЭТО: Включите "debug painting" (выберите "Toggle Debug Paint"
          // в IDE или нажмите "p" в консоли), чтобы увидеть рамки для каждого виджета.
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text('Вы нажали кнопку столько раз:'),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Увеличить',
        child: const Icon(Icons.add),
      ), // Эта запятая в конце делает автоформатирование более приятным для методов build.
    );
  }
}